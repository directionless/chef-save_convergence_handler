require 'json'
require 'chef/log'

module Handler
  class SaveConvergence < Chef::Handler

    def full_convergence?
      # run_context or run_status? Who knows...
      run_status.node.override_runlist.empty?
    end

    def report
      now = Time.now.to_i

      # First, read the old data
      begin
        data = JSON.parse(File.read("<%= node['save_convergence_handler']['outfile'] %>"))
      rescue
        data = {}
      end

      # If this is a full convergence, then update the data entry
      data['full_convergence'] = now if full_convergence?

      # Set all the cookbook versions and timestamps.  Because this is
      # used to dictionary for the recipes, we'll filter it down
      # later.
      data['cookbooks'] = {} unless data['cookbooks'].is_a?(Hash)
      run_context.cookbook_collection.each do |name, cookbook|
        data['cookbooks'][cookbook.name.to_s] =  {
          'version' => cookbook.version,
          'time'    => now,
        }
      end

      # Set all the recipe versions and timestamps.
      # Start with by pruning old entries
      data['recipes'] = {} unless data['recipes'].is_a?(Hash)
      recipefilter = Regexp.union(<%= node['save_convergence_handler']['recipefilters'] %>)
      data['recipes'].keep_if { |name, _v| name.match(recipefilter) }

      # Now look at the runlist and save things as appropriate.
      run_context.loaded_recipes.each do |recipe|
        next unless recipe.match(recipefilter)
        src_cookbook = recipe.split('::').first
        # We want the same data that we stored for the cookbooks, so
        # reuse that.
        data['recipes'][recipe] = data['cookbooks'][src_cookbook]
      end

      # Prune the cookbooks data to what we want to persist to disk.
      cookbookfilter = Regexp.union(<%= node['save_convergence_handler']['cookbookfilters'] %>)
      data['cookbooks'].keep_if { |name, _v| name.match(cookbookfilter) }

      # And now writing everything to disk
      File.open("<%= node['save_convergence_handler']['outfile'] %>", 'w') do |f|
        f.puts JSON.pretty_generate(data)
      end

    end

  end
end
